//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.IpIntelligence.Engine.OnPremise.Interop {

internal class IpAddressSwig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IpAddressSwig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IpAddressSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IpAddressSwig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IpIntelligenceEngineModulePINVOKE.delete_IpAddressSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IpAddressSwig(byte[] ipAddress, IpTypeSwig type) : this(IpIntelligenceEngineModulePINVOKE.new_IpAddressSwig__SWIG_0(ipAddress, (int)type), true) {
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public IpAddressSwig(string ipAddressString) : this(IpIntelligenceEngineModulePINVOKE.new_IpAddressSwig__SWIG_1(ipAddressString), true) {
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getCopyOfIpAddress(byte[] copy, uint size) {
    IpIntelligenceEngineModulePINVOKE.IpAddressSwig_getCopyOfIpAddress(swigCPtr, copy, size);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public IpTypeSwig getType() {
    IpTypeSwig ret = (IpTypeSwig)IpIntelligenceEngineModulePINVOKE.IpAddressSwig_getType(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
