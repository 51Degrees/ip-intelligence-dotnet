//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.IpIntelligence.Engine.OnPremise.Interop {

internal class ConfigIpiSwig : ConfigBaseSwig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ConfigIpiSwig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConfigIpiSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IpIntelligenceEngineModulePINVOKE.delete_ConfigIpiSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ConfigIpiSwig() : this(IpIntelligenceEngineModulePINVOKE.new_ConfigIpiSwig(), true) {
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHighPerformance() {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setHighPerformance(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBalanced() {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setBalanced(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBalancedTemp() {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setBalancedTemp(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLowMemory() {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setLowMemory(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaxPerformance() {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setMaxPerformance(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConcurrency(ushort concurrency) {
    IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_setConcurrency(swigCPtr, concurrency);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public CollectionConfigSwig getStrings() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getStrings(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProperties() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getProperties(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getValues() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getValues(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProfiles() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getProfiles(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getIpv4Ranges() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getIpv4Ranges(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getIpv6Ranges() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getIpv6Ranges(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProfileCombinations() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getProfileCombinations(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProfileOffsets() {
    CollectionConfigSwig ret = new CollectionConfigSwig(IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getProfileOffsets(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ushort getConcurrency() {
    ushort ret = IpIntelligenceEngineModulePINVOKE.ConfigIpiSwig_getConcurrency(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
